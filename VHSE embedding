{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FR4EUe6KbbTN"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "\n",
        "import os\n",
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "c:\\Users\\sean1\\anaconda3\\envs\\biology\\Lib\\site-packages\\requests\\__init__.py:86: RequestsDependencyWarning: Unable to find acceptable character detection dependency (chardet or charset_normalizer).\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "##Protein sequence retreival\n",
        "#!pip install biopython pandas requests\n",
        "\n",
        "from Bio import ExPASy, SwissProt, SeqIO, Entrez\n",
        "from Bio.Blast import NCBIWWW, NCBIXML\n",
        "import pandas as pd\n",
        "import requests"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5E2VOE5mzk1b",
        "outputId": "292a432a-59fe-43c9-902f-3a5a14461b58"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   Accession_ID                                         Full_FASTA\n",
            "0      ONI07761  MWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVNQKYNGAE...\n",
            "1      ONI07760  MQGFTFPMWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVN...\n",
            "2  XP_034217181  MWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVNQKYSGAE...\n",
            "3    CAL9030649  MQGFTFPMWENTLSDRTYDAYYIQLGAEFVGTFILMFAASAGPIVN...\n",
            "4    CAB4280367  MPRCKCLPVNAPTWGQSHTCFTDFPTPTVSLTRKLGAEFVGTFILM...\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "#Protein of interest: Aqua porin  https://www.uniprot.org/uniprotkb/A0A251P855/entry\n",
        "uniprot_id = \"A0A251P855\"\n",
        "\n",
        "# Fetch FASTA directly from UniProt\n",
        "url = f\"https://www.uniprot.org/uniprot/{uniprot_id}.fasta\"\n",
        "response = requests.get(url)\n",
        "fasta_seq = response.text\n",
        "\n",
        "# Run BLASTP against NCBI nr database\n",
        "result_handle = NCBIWWW.qblast(\"blastp\", \"nr\",  fasta_seq, hitlist_size=500)\n",
        "\n",
        "Entrez.email = \"sean011016@gmail.com\"  # required by NCBI\n",
        "\n",
        "blast_record = NCBIXML.read(result_handle)\n",
        "\n",
        "\n",
        "results = []\n",
        "for alignment in blast_record.alignments:\n",
        "    acc = alignment.accession\n",
        "\n",
        "    # Fetch full FASTA sequence from NCBI using accession\n",
        "    handle = Entrez.efetch(db=\"protein\", id=acc, rettype=\"fasta\", retmode=\"text\")\n",
        "    record = SeqIO.read(handle, \"fasta\")\n",
        "    handle.close()\n",
        "\n",
        "    results.append([acc, str(record.seq)])\n",
        "\n",
        "# Make DataFrame and save as CSV\n",
        "seq_df = pd.DataFrame(results, columns=[\"Accession_ID\", \"Full_FASTA\"])\n",
        "\n",
        "print(seq_df.head())\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m6AGCjxOFBUw",
        "outputId": "cc754366-ea8a-4345-9ec5-977f44db573a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "500"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "seq_df.shape[0] "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Make DataFrame and save as CSV\n",
        "seq_df.to_csv(\"aqua_porin_blast_hits.csv\", index=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Start from here"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i8K8Ev7m1H48",
        "outputId": "cd44a60f-5c72-4bce-afea-c4950e19c3fc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Minimum length: 212\n",
            "Maximum length: 2335\n",
            "Average length: 297.638\n"
          ]
        }
      ],
      "source": [
        "##Calculate average protein sequence length\n",
        "#Retrieve sequences from CSV\n",
        "seq_df = pd.read_csv(\"aqua_porin_blast_hits.csv\")\n",
        "\n",
        "seq_df[\"Seq_Length\"] = seq_df[\"Full_FASTA\"].apply(len)\n",
        "\n",
        "# Calculate statistics\n",
        "min_len = seq_df[\"Seq_Length\"].min()\n",
        "max_len = seq_df[\"Seq_Length\"].max()\n",
        "avg_len = seq_df[\"Seq_Length\"].mean()\n",
        "\n",
        "print(\"Minimum length:\", min_len)\n",
        "print(\"Maximum length:\", max_len)\n",
        "print(\"Average length:\", avg_len)\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Minimum length: 212\n",
            "Maximum length: 361\n",
            "Average length: 293.5551102204409\n"
          ]
        }
      ],
      "source": [
        "#Remove sequences outliers\n",
        "seq_df = seq_df[seq_df[\"Seq_Length\"] <= 361].reset_index(drop=True)\n",
        "\n",
        "# Calculate statistics\n",
        "min_len = seq_df[\"Seq_Length\"].min()\n",
        "max_len = seq_df[\"Seq_Length\"].max()\n",
        "avg_len = seq_df[\"Seq_Length\"].mean()\n",
        "\n",
        "print(\"Minimum length:\", min_len)\n",
        "print(\"Maximum length:\", max_len)\n",
        "print(\"Average length:\", avg_len)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xW9KhTp-z8jm",
        "outputId": "14a4ea77-3bc4-43d2-dfc9-f7dac40183f5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[361]\n",
            "   Accession_ID                                         Full_FASTA  \\\n",
            "0      ONI07761  MWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVNQKYNGAE...   \n",
            "1      ONI07760  MQGFTFPMWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVN...   \n",
            "2  XP_034217181  MWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVNQKYSGAE...   \n",
            "3    CAL9030649  MQGFTFPMWENTLSDRTYDAYYIQLGAEFVGTFILMFAASAGPIVN...   \n",
            "4    CAB4280367  MPRCKCLPVNAPTWGQSHTCFTDFPTPTVSLTRKLGAEFVGTFILM...   \n",
            "5  XP_007209472  MPESEPVTPSASAPATPGTPAPLFSGLRVDSMSYDRKSMPRCKCLP...   \n",
            "6  XP_008239293  MPESEPVTPSASAPATPGTPAPLFSGPRVDSMSYDRKSMPRCKCLP...   \n",
            "7    CAB4310780  MPESEPVTPSASAPATPGTPVPLFSGPRVDSMSYDRKSMPRCKCLP...   \n",
            "8      BBH03573  KKPKKKKKKLGMPESEPVTPSASAPATPGTPAPLFSGLRVDSMSYD...   \n",
            "9  XP_034217179  MPESEPVTPSASAPATPGTPAPLFSGLRVDSMSYDRKSMPRCKCLP...   \n",
            "\n",
            "   Seq_Length                                       Padded_FASTA  \n",
            "0         243  ----------------------------------------------...  \n",
            "1         250  ----------------------------------------------...  \n",
            "2         243  ----------------------------------------------...  \n",
            "3         250  ----------------------------------------------...  \n",
            "4         260  ----------------------------------------------...  \n",
            "5         298  ----------------------------------------------...  \n",
            "6         298  ----------------------------------------------...  \n",
            "7         298  ----------------------------------------------...  \n",
            "8         309  ----------------------------------------------...  \n",
            "9         298  ----------------------------------------------...  \n"
          ]
        }
      ],
      "source": [
        "##Fix sequence length by adding padding to both sides Padding Alphabet: \"-\"\n",
        "\n",
        "\n",
        "# Pad sequences with \"-\" on the right (to equal length)\n",
        "#seq_df[\"Padded_FASTA\"] = seq_df[\"Full_FASTA\"].apply(lambda x: x.ljust(max_len, \"-\")) #To the right\n",
        "seq_df[\"Padded_FASTA\"] = seq_df[\"Full_FASTA\"].apply(lambda x: x.rjust(max_len, \"-\")) #To the right\n",
        "# Check lengths (all should be 333)\n",
        "print(seq_df[\"Padded_FASTA\"].apply(len).unique())\n",
        "print(seq_df.head(10))\n",
        "seq_df.to_csv(\"blast_hits.csv\", index=False)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "VHSE8 captures physicochemical properties. \n",
        "\"A new set of amino acid descriptors and its application in peptide QSARs\"\n",
        "\n",
        " AlaA 0.15 1.11 1.35 0.92 0.02 0.91 0.36 0.48\n",
        " ArgR 1.47 1.45 1.24 1.27 1.55 1.47 1.30 0.83\n",
        " AsnN 0.99 0.00 0.37 0.69 0.55 0.85 0.73 0.80\n",
        " AspD 1.15 0.67 0.41 0.01 2.68 1.31 0.03 0.56\n",
        " CysC 0.18 1.67 0.46 0.21 0.00 1.20 1.61 0.19\n",
        " GlnQ 0.96 0.12 0.18 0.16 0.09 0.42 0.20 0.41\n",
        " GluE 1.18 0.40 0.10 0.36 2.16 0.17 0.91 0.02\n",
        " GlyG 0.20 1.53 2.63 2.28 0.53 1.18 2.01 1.34\n",
        " HisH 0.43 0.25 0.37 0.19 0.51 1.28 0.93 0.65\n",
        " IleI 1.27 0.14 0.30 1.80 0.30 1.61 0.16 0.13\n",
        " LeuL 1.36 0.07 0.26 0.80 0.22 1.37 0.08 0.62\n",
        " LysK 1.17 0.70 0.70 0.80 1.64 0.67 1.63 0.13\n",
        " MetM 1.01 0.53 0.43 0.00 0.23 0.10 0.86 0.68\n",
        " PheF 1.52 0.61 0.96 0.16 0.25 0.28 1.33 0.20\n",
        " ProP 0.22 0.17 0.50 0.05 0.01 1.34 0.19 3.56\n",
        " SerS 0.67 0.86 1.07 0.41 0.32 0.27 0.64 0.11\n",
        " ThrT 0.34 0.51 0.55 1.06 0.06 0.01 0.79 0.39\n",
        " TrpW 1.50 2.06 1.79 0.75 0.75 0.13 1.01 0.85\n",
        " TyrY 0.61 1.60 1.17 0.73 0.53 0.25 0.96 0.52\n",
        " ValV 0.76 0.92 0.17 1.91 0.22 1.40 0.24 0.03"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [],
      "source": [
        "# amino acid embedding dictionary\n",
        "aa_embeddings = {\n",
        "    'A': [0.15, 1.11, 1.35, 0.92, 0.02, 0.91, 0.36, 0.48],\n",
        "    'R': [1.47, 1.45, 1.24, 1.27, 1.55, 1.47, 1.30, 0.83],\n",
        "    'N': [0.99, 0.00, 0.37, 0.69, 0.55, 0.85, 0.73, 0.80],\n",
        "    'D': [1.15, 0.67, 0.41, 0.01, 2.68, 1.31, 0.03, 0.56],\n",
        "    'C': [0.18, 1.67, 0.46, 0.21, 0.00, 1.20, 1.61, 0.19],\n",
        "    'Q': [0.96, 0.12, 0.18, 0.16, 0.09, 0.42, 0.20, 0.41],\n",
        "    'E': [1.18, 0.40, 0.10, 0.36, 2.16, 0.17, 0.91, 0.02],\n",
        "    'G': [0.20, 1.53, 2.63, 2.28, 0.53, 1.18, 2.01, 1.34],\n",
        "    'H': [0.43, 0.25, 0.37, 0.19, 0.51, 1.28, 0.93, 0.65],\n",
        "    'I': [1.27, 0.14, 0.30, 1.80, 0.30, 1.61, 0.16, 0.13],\n",
        "    'L': [1.36, 0.07, 0.26, 0.80, 0.22, 1.37, 0.08, 0.62],\n",
        "    'K': [1.17, 0.70, 0.70, 0.80, 1.64, 0.67, 1.63, 0.13],\n",
        "    'M': [1.01, 0.53, 0.43, 0.00, 0.23, 0.10, 0.86, 0.68],\n",
        "    'F': [1.52, 0.61, 0.96, 0.16, 0.25, 0.28, 1.33, 0.20],\n",
        "    'P': [0.22, 0.17, 0.50, 0.05, 0.01, 1.34, 0.19, 3.56],\n",
        "    'S': [0.67, 0.86, 1.07, 0.41, 0.32, 0.27, 0.64, 0.11],\n",
        "    'T': [0.34, 0.51, 0.55, 1.06, 0.06, 0.01, 0.79, 0.39],\n",
        "    'W': [1.50, 2.06, 1.79, 0.75, 0.75, 0.13, 1.01, 0.85],\n",
        "    'Y': [0.61, 1.60, 1.17, 0.73, 0.53, 0.25, 0.96, 0.52],\n",
        "    'V': [0.76, 0.92, 0.17, 1.91, 0.22, 1.40, 0.24, 0.03],\n",
        "    '-': [0.0]*8  # pad/gap token → zero vector\n",
        "}\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [],
      "source": [
        "def embed_sequence(seq, embedding_dict, embed_dim=8):\n",
        "    \"\"\"Convert a protein sequence string into an array of amino-acid embeddings (8 x L).\"\"\"\n",
        "    embedded = np.zeros((len(seq), embed_dim))\n",
        "    for i, aa in enumerate(seq):\n",
        "        embedded[i] = embedding_dict.get(aa, embedding_dict['-'])  # default to gap vector\n",
        "    return embedded.T"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[0.15 0.18 1.15 1.18 1.52 0.2  0.43 1.27 1.17 1.36 1.01 0.99 0.22 0.96\n",
            "  1.47 0.67 0.34 0.76 1.5  0.61 0.  ]\n",
            " [1.11 1.67 0.67 0.4  0.61 1.53 0.25 0.14 0.7  0.07 0.53 0.   0.17 0.12\n",
            "  1.45 0.86 0.51 0.92 2.06 1.6  0.  ]\n",
            " [1.35 0.46 0.41 0.1  0.96 2.63 0.37 0.3  0.7  0.26 0.43 0.37 0.5  0.18\n",
            "  1.24 1.07 0.55 0.17 1.79 1.17 0.  ]\n",
            " [0.92 0.21 0.01 0.36 0.16 2.28 0.19 1.8  0.8  0.8  0.   0.69 0.05 0.16\n",
            "  1.27 0.41 1.06 1.91 0.75 0.73 0.  ]\n",
            " [0.02 0.   2.68 2.16 0.25 0.53 0.51 0.3  1.64 0.22 0.23 0.55 0.01 0.09\n",
            "  1.55 0.32 0.06 0.22 0.75 0.53 0.  ]\n",
            " [0.91 1.2  1.31 0.17 0.28 1.18 1.28 1.61 0.67 1.37 0.1  0.85 1.34 0.42\n",
            "  1.47 0.27 0.01 1.4  0.13 0.25 0.  ]\n",
            " [0.36 1.61 0.03 0.91 1.33 2.01 0.93 0.16 1.63 0.08 0.86 0.73 0.19 0.2\n",
            "  1.3  0.64 0.79 0.24 1.01 0.96 0.  ]\n",
            " [0.48 0.19 0.56 0.02 0.2  1.34 0.65 0.13 0.13 0.62 0.68 0.8  3.56 0.41\n",
            "  0.83 0.11 0.39 0.03 0.85 0.52 0.  ]]\n",
            "(8, 21)\n"
          ]
        }
      ],
      "source": [
        "embed_example = embed_sequence(\"ACDEFGHIKLMNPQRSTVWY-\", aa_embeddings)\n",
        "print(embed_example)\n",
        "print(embed_example.shape)  # should show (8, 20)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "   Accession_ID                                         Full_FASTA  \\\n",
            "0      ONI07761  MWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVNQKYNGAE...   \n",
            "1      ONI07760  MQGFTFPMWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVN...   \n",
            "2  XP_034217181  MWENTLSDRIYDTYYIQLGAEFVGTFILMFAASAGPIVNQKYSGAE...   \n",
            "3    CAL9030649  MQGFTFPMWENTLSDRTYDAYYIQLGAEFVGTFILMFAASAGPIVN...   \n",
            "4    CAB4280367  MPRCKCLPVNAPTWGQSHTCFTDFPTPTVSLTRKLGAEFVGTFILM...   \n",
            "\n",
            "   Seq_Length                                       Padded_FASTA  \\\n",
            "0         243  ----------------------------------------------...   \n",
            "1         250  ----------------------------------------------...   \n",
            "2         243  ----------------------------------------------...   \n",
            "3         250  ----------------------------------------------...   \n",
            "4         260  ----------------------------------------------...   \n",
            "\n",
            "                                            Embedded  \n",
            "0  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n",
            "1  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n",
            "2  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n",
            "3  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n",
            "4  [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,...  \n",
            "(8, 361)\n"
          ]
        }
      ],
      "source": [
        "# Embed each sequence and store in a new column\n",
        "seq_df[\"Embedded\"] = seq_df[\"Padded_FASTA\"].apply(lambda s: embed_sequence(s, aa_embeddings))\n",
        "\n",
        "# Check the result\n",
        "print(seq_df.head())\n",
        "print(seq_df[\"Embedded\"].iloc[0].shape)   # should show (333, 8)\n",
        "seq_df.to_csv(\"blast_hits_embedded.csv\", index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(499, 8, 361)\n"
          ]
        }
      ],
      "source": [
        "seq_df.columns\n",
        "\n",
        "seq_embedded = np.array(seq_df[\"Embedded\"].tolist())\n",
        "print(seq_embedded.shape)  # should show (num_train_sequences, 333, 8)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {},
      "outputs": [],
      "source": [
        "# !pip install torch numpy scikit-learn  # (if needed)\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# 1) Load your data\n",
        "\n",
        "X = seq_embedded # shape (399, 8, 361)\n",
        "#Ensure float32\n",
        "X = X.astype(np.float32)\n",
        "\n",
        "# 2) Optional: per-channel standardization (often helps)\n",
        "# Comment out if your embeddings are already well-scaled.\n",
        "def standardize_per_channel(x):\n",
        "    # x: (N, C, L)\n",
        "    x = x.copy()\n",
        "    C = x.shape[1]\n",
        "    for c in range(C):\n",
        "        mu = x[:, c, :].mean()\n",
        "        sd = x[:, c, :].std() + 1e-8\n",
        "        x[:, c, :] = (x[:, c, :] - mu) / sd\n",
        "    return x\n",
        "\n",
        "X = standardize_per_channel(X)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 3) Train/val split + DataLoaders\n",
        "def make_loaders(X, batch_size=32, test_size=0.2, seed=42):\n",
        "    X_train, X_val = train_test_split(X, test_size=test_size, random_state=seed, shuffle=True)\n",
        "    train_ds = TensorDataset(torch.from_numpy(X_train))\n",
        "    val_ds   = TensorDataset(torch.from_numpy(X_val))\n",
        "    train_dl = DataLoader(train_ds, batch_size=batch_size, shuffle=True, drop_last=False)\n",
        "    val_dl   = DataLoader(val_ds,   batch_size=batch_size, shuffle=False, drop_last=False)\n",
        "    return train_dl, val_dl\n",
        "\n",
        "train_dl, val_dl = make_loaders(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 4) VAE model (Conv1d encoder/decoder)\n",
        "# Input: (B, 8, 361)\n",
        "# Encoder lengths with Conv1d (k=4, s=2, p=1): 361->180->90->45\n",
        "# Decoder uses ConvTranspose1d to go 45->90->180->(360+op=1)->361\n",
        "\n",
        "class Conv1dVAE(nn.Module):\n",
        "    def __init__(self, in_channels=8, latent_dim=32):\n",
        "        super().__init__()\n",
        "        # Encoder\n",
        "        self.enc = nn.Sequential(\n",
        "            nn.Conv1d(in_channels, 32, kernel_size=4, stride=2, padding=1),  # L: 361->180\n",
        "            nn.BatchNorm1d(32), nn.ReLU(inplace=True),\n",
        "            nn.Conv1d(32, 64, kernel_size=4, stride=2, padding=1),           # 180->90\n",
        "            nn.BatchNorm1d(64), nn.ReLU(inplace=True),\n",
        "            nn.Conv1d(64, 128, kernel_size=4, stride=2, padding=1),          # 90->45\n",
        "            nn.BatchNorm1d(128), nn.ReLU(inplace=True),\n",
        "        )\n",
        "        self._enc_out_len = 45\n",
        "        self._enc_out_ch  = 128\n",
        "        enc_flat = self._enc_out_ch * self._enc_out_len\n",
        "\n",
        "        self.fc_mu     = nn.Linear(enc_flat, latent_dim)\n",
        "        self.fc_logvar = nn.Linear(enc_flat, latent_dim)\n",
        "\n",
        "        # Decoder\n",
        "        self.fc_dec = nn.Linear(latent_dim, enc_flat)\n",
        "        self.dec = nn.Sequential(\n",
        "            nn.ConvTranspose1d(128, 64, kernel_size=4, stride=2, padding=1, output_padding=0),  # 45->90\n",
        "            nn.BatchNorm1d(64), nn.ReLU(inplace=True),\n",
        "            nn.ConvTranspose1d(64, 32, kernel_size=4, stride=2, padding=1, output_padding=0),   # 90->180\n",
        "            nn.BatchNorm1d(32), nn.ReLU(inplace=True),\n",
        "            # last layer upsamples 180 -> 361 (use output_padding=1 to get +1)\n",
        "            nn.ConvTranspose1d(32, in_channels, kernel_size=4, stride=2, padding=1, output_padding=1),  # 180->361\n",
        "        )\n",
        "\n",
        "    def encode(self, x):\n",
        "        h = self.enc(x)                        # (B, 128, 45)\n",
        "        h = h.flatten(start_dim=1)             # (B, 128*45)\n",
        "        mu     = self.fc_mu(h)                 # (B, Z)\n",
        "        logvar = self.fc_logvar(h)             # (B, Z)\n",
        "        return mu, logvar\n",
        "\n",
        "    def reparameterize(self, mu, logvar):\n",
        "        std = torch.exp(0.5 * logvar)\n",
        "        eps = torch.randn_like(std)\n",
        "        return mu + eps * std\n",
        "\n",
        "    def decode(self, z):\n",
        "        h = self.fc_dec(z)                     # (B, 128*45)\n",
        "        h = h.view(-1, 128, 45)                # (B, 128, 45)\n",
        "        x_hat = self.dec(h)                    # (B, 8, 361)\n",
        "        return x_hat\n",
        "\n",
        "    def forward(self, x):\n",
        "        mu, logvar = self.encode(x)\n",
        "        z = self.reparameterize(mu, logvar)\n",
        "        x_hat = self.decode(z)\n",
        "        return x_hat, mu, logvar\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 5) Loss (MSE recon + KL)\n",
        "def vae_loss(x, x_hat, mu, logvar, beta=1.0):\n",
        "    # Reconstruction loss\n",
        "    recon = nn.functional.mse_loss(x_hat, x, reduction='mean')\n",
        "    # KL divergence: D_KL(q(z|x) || p(z)) where p ~ N(0, I)\n",
        "    kl = -0.5 * torch.mean(1 + logvar - mu.pow(2) - logvar.exp())\n",
        "    return recon + beta*kl, recon, kl\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# 6) Train loop\n",
        "def train_vae(X, latent_dim=32, epochs=5, batch_size=32, lr=1e-3, beta=1.0, device=None):\n",
        "    if device is None:\n",
        "        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "\n",
        "    train_dl, val_dl = make_loaders(X, batch_size=batch_size)\n",
        "    model = Conv1dVAE(in_channels=8, latent_dim=latent_dim).to(device)\n",
        "    opt = torch.optim.Adam(model.parameters(), lr=lr)\n",
        "\n",
        "    train_losses, val_losses = [], []\n",
        "\n",
        "    for epoch in range(1, epochs+1):\n",
        "        model.train()\n",
        "        tr_loss = tr_rec = tr_kl = 0.0\n",
        "        for (xb,) in train_dl:\n",
        "            xb = xb.to(device)\n",
        "            x_hat, mu, logvar = model(xb)\n",
        "            loss, rec, kl = vae_loss(xb, x_hat, mu, logvar, beta=beta)\n",
        "            opt.zero_grad()\n",
        "            loss.backward()\n",
        "            opt.step()\n",
        "            tr_loss += loss.item() * xb.size(0)\n",
        "            tr_rec  += rec.item()  * xb.size(0)\n",
        "            tr_kl   += kl.item()   * xb.size(0)\n",
        "        ntr = len(train_dl.dataset)\n",
        "        train_loss = tr_loss/ntr\n",
        "        train_losses.append(train_loss)\n",
        "\n",
        "        model.eval()\n",
        "        va_loss = va_rec = va_kl = 0.0\n",
        "        with torch.no_grad():\n",
        "            for (xb,) in val_dl:\n",
        "                xb = xb.to(device)\n",
        "                x_hat, mu, logvar = model(xb)\n",
        "                loss, rec, kl = vae_loss(xb, x_hat, mu, logvar, beta=beta)\n",
        "                va_loss += loss.item() * xb.size(0)\n",
        "                va_rec  += rec.item()  * xb.size(0)\n",
        "                va_kl   += kl.item()   * xb.size(0)\n",
        "        nva = len(val_dl.dataset)\n",
        "        val_loss = va_loss/nva\n",
        "        val_losses.append(val_loss)\n",
        "\n",
        "        print(f\"Epoch {epoch:02d} | \"\n",
        "              f\"train: loss {tr_loss/ntr:.4f} (rec {tr_rec/ntr:.4f}, kl {tr_kl/ntr:.4f}) | \"\n",
        "              f\"val: loss {va_loss/nva:.4f} (rec {va_rec/nva:.4f}, kl {va_kl/nva:.4f})\")\n",
        "\n",
        "    return model, train_losses, val_losses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {},
      "outputs": [],
      "source": [
        "def train_vae(X, latent_dim=32, epochs=30, batch_size=32, lr=1e-3, beta=1.0, device=None):\n",
        "    if device is None:\n",
        "        device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "\n",
        "    # Split into train/val sets\n",
        "    from sklearn.model_selection import train_test_split\n",
        "    X_train, X_val = train_test_split(X, test_size=0.2, random_state=42, shuffle=True)\n",
        "\n",
        "    train_ds = TensorDataset(torch.from_numpy(X_train))\n",
        "    val_ds   = TensorDataset(torch.from_numpy(X_val))\n",
        "    train_dl = DataLoader(train_ds, batch_size=batch_size, shuffle=True, drop_last=False)\n",
        "    val_dl   = DataLoader(val_ds, batch_size=batch_size, shuffle=False, drop_last=False)\n",
        "\n",
        "    model = Conv1dVAE(in_channels=8, latent_dim=latent_dim).to(device)\n",
        "    opt = torch.optim.Adam(model.parameters(), lr=lr)\n",
        "\n",
        "    # Record losses\n",
        "    train_losses, val_losses = [], []\n",
        "\n",
        "    for epoch in range(1, epochs+1):\n",
        "        # --- TRAIN ---\n",
        "        model.train()\n",
        "        tr_loss_sum = 0.0\n",
        "        for (xb,) in train_dl:\n",
        "            xb = xb.to(device)\n",
        "            x_hat, mu, logvar = model(xb)\n",
        "            loss, rec, kl = vae_loss(xb, x_hat, mu, logvar, beta=beta)\n",
        "            opt.zero_grad()\n",
        "            loss.backward()\n",
        "            opt.step()\n",
        "            tr_loss_sum += loss.item() * xb.size(0)\n",
        "        train_loss = tr_loss_sum / len(train_dl.dataset)\n",
        "        train_losses.append(train_loss)\n",
        "\n",
        "        # --- VALIDATION ---\n",
        "        model.eval()\n",
        "        va_loss_sum = 0.0\n",
        "        with torch.no_grad():\n",
        "            for (xb,) in val_dl:\n",
        "                xb = xb.to(device)\n",
        "                x_hat, mu, logvar = model(xb)\n",
        "                loss, rec, kl = vae_loss(xb, x_hat, mu, logvar, beta=beta)\n",
        "                va_loss_sum += loss.item() * xb.size(0)\n",
        "        val_loss = va_loss_sum / len(val_dl.dataset)\n",
        "        val_losses.append(val_loss)\n",
        "\n",
        "        print(f\"Epoch {epoch:02d} | Train Loss: {train_loss:.4f} | Val Loss: {val_loss:.4f}\")\n",
        "\n",
        "    return model, train_losses, val_losses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 01 | train: loss 1.8382 (rec 1.1485, kl 0.6897) | val: loss 1.0304 (rec 1.0085, kl 0.0219)\n",
            "Epoch 02 | train: loss 1.1752 (rec 1.0097, kl 0.1655) | val: loss 1.0144 (rec 0.9778, kl 0.0367)\n",
            "Epoch 03 | train: loss 1.0063 (rec 0.9489, kl 0.0573) | val: loss 0.9395 (rec 0.9008, kl 0.0387)\n",
            "Epoch 04 | train: loss 0.9021 (rec 0.8668, kl 0.0353) | val: loss 0.8627 (rec 0.8257, kl 0.0370)\n",
            "Epoch 05 | train: loss 0.8274 (rec 0.7986, kl 0.0288) | val: loss 0.8135 (rec 0.7771, kl 0.0365)\n",
            "Epoch 06 | train: loss 0.7870 (rec 0.7543, kl 0.0326) | val: loss 0.7685 (rec 0.7277, kl 0.0408)\n",
            "Epoch 07 | train: loss 0.7477 (rec 0.7093, kl 0.0384) | val: loss 0.7355 (rec 0.6876, kl 0.0480)\n",
            "Epoch 08 | train: loss 0.7086 (rec 0.6667, kl 0.0419) | val: loss 0.7065 (rec 0.6566, kl 0.0499)\n",
            "Epoch 09 | train: loss 0.6842 (rec 0.6343, kl 0.0499) | val: loss 0.6739 (rec 0.6127, kl 0.0612)\n",
            "Epoch 10 | train: loss 0.6537 (rec 0.5993, kl 0.0544) | val: loss 0.6355 (rec 0.5797, kl 0.0558)\n",
            "Epoch 11 | train: loss 0.6315 (rec 0.5703, kl 0.0612) | val: loss 0.6416 (rec 0.5689, kl 0.0727)\n",
            "Epoch 12 | train: loss 0.6255 (rec 0.5484, kl 0.0772) | val: loss 0.6286 (rec 0.5670, kl 0.0615)\n",
            "Epoch 13 | train: loss 0.6120 (rec 0.5342, kl 0.0778) | val: loss 0.6012 (rec 0.5062, kl 0.0950)\n",
            "Epoch 14 | train: loss 0.6063 (rec 0.5169, kl 0.0894) | val: loss 0.5830 (rec 0.4835, kl 0.0995)\n",
            "Epoch 15 | train: loss 0.6220 (rec 0.5169, kl 0.1050) | val: loss 0.6666 (rec 0.4918, kl 0.1749)\n",
            "Epoch 16 | train: loss 0.5914 (rec 0.4890, kl 0.1025) | val: loss 0.6003 (rec 0.5186, kl 0.0817)\n",
            "Epoch 17 | train: loss 0.5613 (rec 0.4732, kl 0.0880) | val: loss 0.5624 (rec 0.4527, kl 0.1097)\n",
            "Epoch 18 | train: loss 0.5484 (rec 0.4658, kl 0.0827) | val: loss 0.5221 (rec 0.4213, kl 0.1008)\n",
            "Epoch 19 | train: loss 0.5286 (rec 0.4458, kl 0.0828) | val: loss 0.5596 (rec 0.4785, kl 0.0811)\n",
            "Epoch 20 | train: loss 0.5310 (rec 0.4399, kl 0.0911) | val: loss 0.5146 (rec 0.4189, kl 0.0957)\n",
            "Epoch 21 | train: loss 0.5388 (rec 0.4379, kl 0.1010) | val: loss 0.5177 (rec 0.4141, kl 0.1035)\n",
            "Epoch 22 | train: loss 0.5193 (rec 0.4258, kl 0.0935) | val: loss 0.5423 (rec 0.4076, kl 0.1348)\n",
            "Epoch 23 | train: loss 0.5122 (rec 0.4126, kl 0.0996) | val: loss 0.4899 (rec 0.4008, kl 0.0891)\n",
            "Epoch 24 | train: loss 0.5088 (rec 0.4170, kl 0.0919) | val: loss 0.4967 (rec 0.4123, kl 0.0843)\n",
            "Epoch 25 | train: loss 0.4931 (rec 0.4053, kl 0.0877) | val: loss 0.4815 (rec 0.4064, kl 0.0751)\n",
            "Epoch 26 | train: loss 0.4839 (rec 0.3975, kl 0.0864) | val: loss 0.4834 (rec 0.4051, kl 0.0783)\n",
            "Epoch 27 | train: loss 0.4799 (rec 0.3951, kl 0.0849) | val: loss 0.4811 (rec 0.3908, kl 0.0904)\n",
            "Epoch 28 | train: loss 0.4744 (rec 0.3880, kl 0.0863) | val: loss 0.4888 (rec 0.3947, kl 0.0941)\n",
            "Epoch 29 | train: loss 0.4939 (rec 0.3971, kl 0.0969) | val: loss 0.5346 (rec 0.4546, kl 0.0800)\n",
            "Epoch 30 | train: loss 0.4802 (rec 0.3953, kl 0.0849) | val: loss 0.4698 (rec 0.3791, kl 0.0907)\n",
            "Epoch 31 | train: loss 0.4696 (rec 0.3846, kl 0.0849) | val: loss 0.4661 (rec 0.3842, kl 0.0819)\n",
            "Epoch 32 | train: loss 0.4638 (rec 0.3788, kl 0.0850) | val: loss 0.4586 (rec 0.3789, kl 0.0796)\n",
            "Epoch 33 | train: loss 0.4696 (rec 0.3817, kl 0.0879) | val: loss 0.4641 (rec 0.3665, kl 0.0976)\n",
            "Epoch 34 | train: loss 0.4555 (rec 0.3724, kl 0.0831) | val: loss 0.4533 (rec 0.3553, kl 0.0979)\n",
            "Epoch 35 | train: loss 0.4597 (rec 0.3699, kl 0.0898) | val: loss 0.4311 (rec 0.3496, kl 0.0815)\n",
            "Epoch 36 | train: loss 0.4418 (rec 0.3619, kl 0.0798) | val: loss 0.4514 (rec 0.3855, kl 0.0659)\n",
            "Epoch 37 | train: loss 0.4367 (rec 0.3573, kl 0.0794) | val: loss 0.4317 (rec 0.3599, kl 0.0718)\n",
            "Epoch 38 | train: loss 0.4379 (rec 0.3576, kl 0.0804) | val: loss 0.4362 (rec 0.3614, kl 0.0748)\n",
            "Epoch 39 | train: loss 0.4420 (rec 0.3618, kl 0.0802) | val: loss 0.4366 (rec 0.3543, kl 0.0823)\n",
            "Epoch 40 | train: loss 0.4402 (rec 0.3561, kl 0.0842) | val: loss 0.4427 (rec 0.3575, kl 0.0852)\n"
          ]
        },
        {
          "ename": "TypeError",
          "evalue": "cannot unpack non-iterable Conv1dVAE object",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "Cell \u001b[1;32mIn[58], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# 7) Train (uncomment when X is defined)\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m model, train_losses, val_losses \u001b[38;5;241m=\u001b[39m train_vae(X, latent_dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m32\u001b[39m, epochs\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m40\u001b[39m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m32\u001b[39m, lr\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1e-3\u001b[39m, beta\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1.0\u001b[39m)\n",
            "\u001b[1;31mTypeError\u001b[0m: cannot unpack non-iterable Conv1dVAE object"
          ]
        }
      ],
      "source": [
        "\n",
        "# 7) Train (uncomment when X is defined)\n",
        "model, train_losses, val_losses = train_vae(X, latent_dim=32, epochs=40, batch_size=32, lr=1e-3, beta=1.0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 01 | Train Loss: 1.9110 | Val Loss: 1.0368\n",
            "Epoch 02 | Train Loss: 1.1623 | Val Loss: 1.0116\n",
            "Epoch 03 | Train Loss: 0.9836 | Val Loss: 0.9164\n",
            "Epoch 04 | Train Loss: 0.8798 | Val Loss: 0.8431\n",
            "Epoch 05 | Train Loss: 0.8149 | Val Loss: 0.8051\n",
            "Epoch 06 | Train Loss: 0.7750 | Val Loss: 0.7699\n",
            "Epoch 07 | Train Loss: 0.7367 | Val Loss: 0.7242\n",
            "Epoch 08 | Train Loss: 0.7070 | Val Loss: 0.7105\n",
            "Epoch 09 | Train Loss: 0.6816 | Val Loss: 0.6718\n",
            "Epoch 10 | Train Loss: 0.6559 | Val Loss: 0.6761\n",
            "Epoch 11 | Train Loss: 0.6414 | Val Loss: 0.6367\n",
            "Epoch 12 | Train Loss: 0.6384 | Val Loss: 0.7038\n",
            "Epoch 13 | Train Loss: 0.6324 | Val Loss: 0.6332\n",
            "Epoch 14 | Train Loss: 0.6181 | Val Loss: 0.5834\n",
            "Epoch 15 | Train Loss: 0.6017 | Val Loss: 0.6001\n",
            "Epoch 16 | Train Loss: 0.5862 | Val Loss: 0.5847\n",
            "Epoch 17 | Train Loss: 0.5724 | Val Loss: 0.5755\n",
            "Epoch 18 | Train Loss: 0.5588 | Val Loss: 0.5978\n",
            "Epoch 19 | Train Loss: 0.5468 | Val Loss: 0.5198\n",
            "Epoch 20 | Train Loss: 0.5236 | Val Loss: 0.5876\n",
            "Epoch 21 | Train Loss: 0.5405 | Val Loss: 0.5830\n",
            "Epoch 22 | Train Loss: 0.5434 | Val Loss: 0.5200\n",
            "Epoch 23 | Train Loss: 0.5422 | Val Loss: 0.5690\n",
            "Epoch 24 | Train Loss: 0.5503 | Val Loss: 0.5149\n",
            "Epoch 25 | Train Loss: 0.5109 | Val Loss: 0.5119\n",
            "Epoch 26 | Train Loss: 0.5032 | Val Loss: 0.5073\n",
            "Epoch 27 | Train Loss: 0.5124 | Val Loss: 0.4888\n",
            "Epoch 28 | Train Loss: 0.4817 | Val Loss: 0.5152\n",
            "Epoch 29 | Train Loss: 0.4857 | Val Loss: 0.4825\n",
            "Epoch 30 | Train Loss: 0.4796 | Val Loss: 0.4712\n",
            "Epoch 31 | Train Loss: 0.4735 | Val Loss: 0.4864\n",
            "Epoch 32 | Train Loss: 0.4683 | Val Loss: 0.4551\n",
            "Epoch 33 | Train Loss: 0.4640 | Val Loss: 0.4766\n",
            "Epoch 34 | Train Loss: 0.4570 | Val Loss: 0.4610\n",
            "Epoch 35 | Train Loss: 0.4633 | Val Loss: 0.4621\n",
            "Epoch 36 | Train Loss: 0.4523 | Val Loss: 0.4463\n",
            "Epoch 37 | Train Loss: 0.4530 | Val Loss: 0.4365\n",
            "Epoch 38 | Train Loss: 0.4367 | Val Loss: 0.4433\n",
            "Epoch 39 | Train Loss: 0.4400 | Val Loss: 0.4476\n",
            "Epoch 40 | Train Loss: 0.4466 | Val Loss: 0.4546\n"
          ]
        }
      ],
      "source": [
        "model, train_losses, val_losses = train_vae(\n",
        "    X,\n",
        "    latent_dim=32,\n",
        "    epochs=40,\n",
        "    batch_size=32,\n",
        "    lr=1e-3,\n",
        "    beta=1.0\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(7,5))\n",
        "plt.plot(train_losses, label=\"Train Loss\", linewidth=2)\n",
        "plt.plot(val_losses, label=\"Validation Loss\", linewidth=2)\n",
        "plt.xlabel(\"Epoch\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.title(\"VAE Training & Validation Loss\")\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {},
      "outputs": [],
      "source": [
        "aa_vecs = np.array(list(aa_embeddings.values()))\n",
        "aa_letters = np.array(list(aa_embeddings.keys()))\n",
        "\n",
        "def decode_embedding_to_sequence(reconstructed, method=\"cosine\"):\n",
        "    \"\"\"\n",
        "    reconstructed: np.ndarray of shape (8, 361)\n",
        "    returns: predicted amino acid string (length 361)\n",
        "    \"\"\"\n",
        "    seq = \"\"\n",
        "    # Transpose to iterate over positions\n",
        "    for i in range(reconstructed.shape[1]):\n",
        "        vec = reconstructed[:, i]\n",
        "        if method == \"cosine\":\n",
        "            # cosine similarity\n",
        "            sims = np.dot(aa_vecs, vec) / (np.linalg.norm(aa_vecs, axis=1)*np.linalg.norm(vec) + 1e-8)\n",
        "            aa = aa_letters[np.argmax(sims)]\n",
        "        else:\n",
        "            # euclidean distance\n",
        "            dists = np.linalg.norm(aa_vecs - vec, axis=1)\n",
        "            aa = aa_letters[np.argmin(dists)]\n",
        "        seq += aa\n",
        "    return seq\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "🧬 Protein #1\n",
            "Sequence Identity: 68.98%\n",
            "Original:       ----------------------------------------------------------------------------------------------------------------------MW...\n",
            "Reconstructed:  --------------------------------------------------------------------P--P---PP-PP--P-P---EPD---MEEEEE--PECECLPIDAP-WG-PP-...\n",
            "\n",
            "🧬 Protein #2\n",
            "Sequence Identity: 69.25%\n",
            "Original:       ---------------------------------------------------------------------------------------------------------------MQGFTFPMW...\n",
            "Reconstructed:  -------------------------------------------------------------------E---P---PPPPPP-P-P---EPDEE-EEEEEE-PPKCECLPDDAPTWG-PP-...\n",
            "\n",
            "🧬 Protein #3\n",
            "Sequence Identity: 41.27%\n",
            "Original:       ----------------------------------------------------------------------------------------------------------------------MW...\n",
            "Reconstructed:  ------------------------------------------------------------------------------------------------------------------------...\n",
            "\n",
            "🧬 Protein #4\n",
            "Sequence Identity: 71.47%\n",
            "Original:       ---------------------------------------------------------------------------------------------------------------MQGFTFPMW...\n",
            "Reconstructed:  ------------------------------------------------------------------------------------------------------------------------...\n",
            "\n",
            "🧬 Protein #5\n",
            "Sequence Identity: 70.64%\n",
            "Original:       -----------------------------------------------------------------------------------------------------MPRCKCLPVNAPTWGQSHT...\n",
            "Reconstructed:  -----------------------------------------------------------------E-EPP-PPPPPPPPPGPPPPEMFFDDEEWWEEEKEEMPRCECLPDDAPTWG-PPF...\n",
            "\n",
            "🧬 Protein #6\n",
            "Sequence Identity: 70.36%\n",
            "Original:       ---------------------------------------------------------------MPESEPVTPSASAPATPGTPAPLFSGLRVDSMSYDRKSMPRCKCLPVNAPTWGQSHT...\n",
            "Reconstructed:  -----------------------------------------------------------------EEEPPYPGGPPPGPPGPPPPQMWEDDEEWMEEDKEFMPRCECLPIDAPSWGMPP-...\n",
            "\n",
            "🧬 Protein #7\n",
            "Sequence Identity: 60.94%\n",
            "Original:       ---------------------------------------------------------------MPESEPVTPSASAPATPGTPAPLFSGPRVDSMSYDRKSMPRCKCLPVNARTWGQSHT...\n",
            "Reconstructed:  ---------------------------------------------------------------EPDEEPHGPGPPPPGPPPGPPPPPMMLDEDDDEEDEEEMPMCKCLPPDRPPWYGPP-...\n",
            "\n",
            "🧬 Protein #8\n",
            "Sequence Identity: 67.59%\n",
            "Original:       ---------------------------------------------------------------MPESEPVTPSASAPATPGTPVPLFSGPRVDSMSYDRKSMPRCKCLPVNAPTWGQSHT...\n",
            "Reconstructed:  -----------------------------------------------------------------EEE-E-PP--PPPPPGPPPPPMFPDDEDEWEEEEEEMPDDECLPDDPPPWGIPP-...\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 700x400 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "#   model  -> trained Conv1dVAE\n",
        "#   X      -> numpy array of shape (399, 8, 361)\n",
        "#   seq_df -> DataFrame with column \"Padded_FASTA\"\n",
        "#   decode_embedding_to_sequence() -> defined earlier\n",
        "#   aa_embeddings -> dictionary of amino-acid embeddings\n",
        "\n",
        "device = next(model.parameters()).device\n",
        "\n",
        "# ------------------------------------------------------------\n",
        "# 1️⃣ Reconstruct a small batch\n",
        "with torch.no_grad():\n",
        "    xb = torch.from_numpy(X[:8]).to(device)\n",
        "    x_hat, _, _ = model(xb)\n",
        "    recon = x_hat.cpu().numpy()  # (8, 8, 361)\n",
        "\n",
        "# ------------------------------------------------------------\n",
        "# 2️⃣ Decode reconstructed arrays → amino-acid strings\n",
        "decoded_sequences = [decode_embedding_to_sequence(r, method=\"cosine\") for r in recon]\n",
        "\n",
        "# ------------------------------------------------------------\n",
        "# 3️⃣ Compare original vs reconstructed + compute sequence identity\n",
        "def sequence_identity(seq1, seq2):\n",
        "    \"\"\"Return percentage identity between two equal-length strings.\"\"\"\n",
        "    matches = sum(a == b for a, b in zip(seq1, seq2))\n",
        "    return 100.0 * matches / len(seq1)\n",
        "\n",
        "results = []\n",
        "for i, dec in enumerate(decoded_sequences):\n",
        "    orig = seq_df[\"Padded_FASTA\"].iloc[i]\n",
        "    ident = sequence_identity(orig, dec)\n",
        "    results.append((i, ident))\n",
        "    print(f\"\\n🧬 Protein #{i+1}\")\n",
        "    print(f\"Sequence Identity: {ident:.2f}%\")\n",
        "    print(\"Original:      \", orig[:120] + (\"...\" if len(orig) > 120 else \"\"))\n",
        "    print(\"Reconstructed: \", dec[:120] + (\"...\" if len(dec) > 120 else \"\"))\n",
        "\n",
        "# ------------------------------------------------------------\n",
        "# 4️⃣ Plot sequence identity for these proteins\n",
        "ids, identities = zip(*results)\n",
        "plt.figure(figsize=(7,4))\n",
        "plt.bar(range(len(identities)), identities, color=\"#4C72B0\")\n",
        "plt.xticks(range(len(identities)), [f\"P{i+1}\" for i in ids])\n",
        "plt.ylabel(\"Sequence Identity (%)\")\n",
        "plt.title(\"Original vs Reconstructed Protein Sequences\")\n",
        "plt.ylim(0, 100)\n",
        "plt.grid(axis=\"y\", linestyle=\"--\", alpha=0.6)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\sean1\\AppData\\Local\\Temp\\ipykernel_16500\\1590782068.py:44: UserWarning: Glyph 129516 (\\N{DNA DOUBLE HELIX}) missing from font(s) DejaVu Sans.\n",
            "  plt.tight_layout()\n",
            "c:\\Users\\sean1\\anaconda3\\envs\\biology\\Lib\\site-packages\\IPython\\core\\pylabtools.py:170: UserWarning: Glyph 129516 (\\N{DNA DOUBLE HELIX}) missing from font(s) DejaVu Sans.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x300 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "import seaborn as sns\n",
        "\n",
        "# ------------------------------------------------------------\n",
        "# assumes:\n",
        "#   model, X, seq_df, decode_embedding_to_sequence() already exist\n",
        "#   aa_embeddings dictionary already defined\n",
        "# ------------------------------------------------------------\n",
        "\n",
        "device = next(model.parameters()).device\n",
        "\n",
        "# 1️⃣ Reconstruct a few proteins\n",
        "with torch.no_grad():\n",
        "    xb = torch.from_numpy(X[:4]).to(device)  # first 4 for visualization\n",
        "    x_hat, _, _ = model(xb)\n",
        "    recon = x_hat.cpu().numpy()  # shape (4, 8, 361)\n",
        "\n",
        "# 2️⃣ Decode reconstructed embeddings → amino acid strings\n",
        "decoded_sequences = [decode_embedding_to_sequence(r, method=\"cosine\") for r in recon]\n",
        "original_sequences = [seq_df[\"Padded_FASTA\"].iloc[i] for i in range(len(decoded_sequences))]\n",
        "\n",
        "# 3️⃣ Compute difference matrix (1 = match, 0 = mismatch)\n",
        "def compute_match_matrix(orig_seq, recon_seq):\n",
        "    \"\"\"Return a binary match array (len L): 1 if match else 0.\"\"\"\n",
        "    return np.array([1 if o == r else 0 for o, r in zip(orig_seq, recon_seq)])\n",
        "\n",
        "match_matrices = [compute_match_matrix(o, r) for o, r in zip(original_sequences, decoded_sequences)]\n",
        "\n",
        "# 4️⃣ Plot heatmap\n",
        "fig, ax = plt.subplots(figsize=(12, 3))\n",
        "heat_data = np.vstack(match_matrices)  # shape (#proteins, sequence_length)\n",
        "\n",
        "sns.heatmap(\n",
        "    heat_data,\n",
        "    cmap=sns.color_palette([\"#FF6B6B\", \"#00C853\"]),  # red = mismatch, green = match\n",
        "    cbar=False,\n",
        "    linewidths=0.1,\n",
        "    linecolor=\"gray\",\n",
        "    xticklabels=50,  # show tick every 50 positions\n",
        "    yticklabels=[f\"P{i+1}\" for i in range(len(match_matrices))]\n",
        ")\n",
        "ax.set_xlabel(\"Sequence Position\")\n",
        "ax.set_ylabel(\"Protein ID\")\n",
        "ax.set_title(\"🧬 VAE Reconstruction Accuracy (Green = Match, Red = Mismatch)\")\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "biology",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
